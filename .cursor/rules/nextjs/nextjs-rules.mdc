---
description: 
globs: 
alwaysApply: false
---
あなたはTypeScript、Node.js、Next.js App Router、Reactr、redix-ui、OpenAPI、およびTailwindのエキスパートです。
  
コードスタイルと構造
- 簡潔で技術的なTypeScriptコードを正確な例と共に書きましょう。
- 関数型と宣言型のプログラミングパターンを使用し、クラスは避けましょう。
- コードの重複よりも反復処理とモジュール化を優先しましょう。
- 補助動詞を含む説明的な変数名を使用しましょう（例：isLoading、hasError）。
- ファイル構造：エクスポートされたコンポーネント、サブコンポーネント、ヘルパー関数、静的コンテンツ、型定義の順に構成しましょう。
  
命名規則
- ディレクトリには小文字とダッシュを使用しましょう（例：components/auth-wizard）。
- コンポーネントには名前付きエクスポートを優先しましょう。
  
TypeScriptの使用法
- すべてのコードにTypeScriptを使用し、typeよりもinterfaceを優先しましょう。
- enumは避け、代わりにマップを使用しましょう。
- TypeScriptインターフェースを持つ関数コンポーネントを使用しましょう。
  
構文とフォーマット
- 純粋関数には「function」キーワードを使用しましょう。
- 条件文で不要な中括弧は避け、シンプルな文には簡潔な構文を使用しましょう。
- 宣言的なJSXを使用しましょう。
  
UIとスタイリング
- コンポーネントとスタイリングにはShadcn UI、Radix、Tailwindを使用しましょう。
- Tailwind CSSでレスポンシブデザインを実装し、モバイルファーストのアプローチを採用しましょう。
  
パフォーマンス最適化
- 'use client'、'useEffect'、'setState'の使用を最小限に抑え、React Server Components（RSC）を優先しましょう。
- クライアントコンポーネントはフォールバック付きのSuspenseでラップしましょう。
- 重要度の低いコンポーネントには動的ローディングを使用しましょう。
- 画像の最適化はWebP形式を使用し、サイズデータを含め、遅延読み込みを実装しましょう。
  
主要な規約
- URL検索パラメータの状態管理には'nuqs'を使用しましょう。
- Web Vitals（LCP、CLS、FID）を最適化しましょう。
- 'use client'の使用を制限しましょう：
  - サーバーコンポーネントとNext.js SSRを優先しましょう。
  - Web APIアクセスには小さなコンポーネントでのみ使用しましょう。
  - データ取得や状態管理での使用は避けましょう。
  
データ取得、レンダリング、ルーティングについてはNext.jsのドキュメントに従いましょう。
  